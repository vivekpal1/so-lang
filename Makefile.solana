# Makefile.solana - So Lang Solana Development Build System
# Complete build system for Solana program development with So Lang

# Compiler settings
CC = gcc
RUSTC = rustc
ANCHOR = anchor
SOLANA = solana
CFLAGS = -Wall -Wextra -O3 -std=c99 -march=native -flto
DEBUG_FLAGS = -Wall -Wextra -g -std=c99 -DDEBUG

# Directories
SRCDIR = src
BINDIR = bin
SOLANA_EXAMPLES_DIR = examples/solana
SOLANA_BUILD_DIR = solana_build
ANCHOR_DIR = anchor_projects
NATIVE_SOLANA_DIR = native_solana

# Solana compiler
SOLANA_SOURCES = $(SRCDIR)/so_lang_enhanced.c $(SRCDIR)/so_lang_solana.c
SOLANA_HEADERS = $(SRCDIR)/so_lang.h $(SRCDIR)/so_lang_solana.h
SOLANA_COMPILER = $(BINDIR)/solang-solana

# Solana programs
COUNTER_PROGRAM = $(SOLANA_EXAMPLES_DIR)/counter.so
TOKEN_TRANSFER_PROGRAM = $(SOLANA_EXAMPLES_DIR)/token_transfer.so
VOTING_DAO_PROGRAM = $(SOLANA_EXAMPLES_DIR)/voting_dao.so

# Output directories for generated Rust
ANCHOR_OUTPUT_DIR = $(SOLANA_BUILD_DIR)/anchor
NATIVE_OUTPUT_DIR = $(SOLANA_BUILD_DIR)/native

# Default target
all: solana-compiler solana-examples

# Create directories
$(BINDIR):
	mkdir -p $(BINDIR)

$(SOLANA_BUILD_DIR):
	mkdir -p $(SOLANA_BUILD_DIR)

$(ANCHOR_OUTPUT_DIR): | $(SOLANA_BUILD_DIR)
	mkdir -p $(ANCHOR_OUTPUT_DIR)

$(NATIVE_OUTPUT_DIR): | $(SOLANA_BUILD_DIR)
	mkdir -p $(NATIVE_OUTPUT_DIR)

$(SOLANA_EXAMPLES_DIR):
	mkdir -p $(SOLANA_EXAMPLES_DIR)

# ============================================================================
# SOLANA COMPILER BUILD
# ============================================================================

# Build the Solana-enhanced So Lang compiler
solana-compiler: $(SOLANA_COMPILER)

$(SOLANA_COMPILER): $(SOLANA_SOURCES) $(SOLANA_HEADERS) | $(BINDIR)
	@echo "🔨 Building So Lang Solana Compiler..."
	$(CC) $(CFLAGS) -DSO_LANG_SOLANA $(SOLANA_SOURCES) -o $(SOLANA_COMPILER)
	@echo "✅ Solana compiler built: $(SOLANA_COMPILER)"

# Debug build
solana-debug: $(SOLANA_SOURCES) $(SOLANA_HEADERS) | $(BINDIR)
	$(CC) $(DEBUG_FLAGS) -DSO_LANG_SOLANA $(SOLANA_SOURCES) -o $(BINDIR)/solang-solana-debug
	@echo "✅ Debug Solana compiler built"

# ============================================================================
# EXAMPLE PROGRAMS SETUP
# ============================================================================

# Create example Solana programs
solana-examples: | $(SOLANA_EXAMPLES_DIR)
	@echo "📝 Creating Solana example programs..."
	@# Copy the example programs from artifacts to the examples directory
	@echo "Copy counter.so, token_transfer.so, and voting_dao.so to $(SOLANA_EXAMPLES_DIR)/"
	@echo "✅ Example programs ready"

# ============================================================================
# ANCHOR FRAMEWORK COMPILATION
# ============================================================================

# Compile So Lang to Anchor Rust
compile-anchor: $(SOLANA_COMPILER) | $(ANCHOR_OUTPUT_DIR)
	@echo "⚓ Compiling So Lang programs to Anchor Rust..."
	
	@# Counter program
	@if [ -f "$(COUNTER_PROGRAM)" ]; then \
		echo "Compiling counter program to Anchor..."; \
		$(SOLANA_COMPILER) $(COUNTER_PROGRAM) --anchor --output $(ANCHOR_OUTPUT_DIR)/counter.rs; \
	fi
	
	@# Token transfer program
	@if [ -f "$(TOKEN_TRANSFER_PROGRAM)" ]; then \
		echo "Compiling token transfer program to Anchor..."; \
		$(SOLANA_COMPILER) $(TOKEN_TRANSFER_PROGRAM) --anchor --output $(ANCHOR_OUTPUT_DIR)/token_transfer.rs; \
	fi
	
	@# Voting DAO program
	@if [ -f "$(VOTING_DAO_PROGRAM)" ]; then \
		echo "Compiling voting DAO program to Anchor..."; \
		$(SOLANA_COMPILER) $(VOTING_DAO_PROGRAM) --anchor --output $(ANCHOR_OUTPUT_DIR)/voting_dao.rs; \
	fi
	
	@echo "✅ Anchor compilation complete"

# Build Anchor projects
build-anchor: compile-anchor
	@echo "🔨 Building Anchor projects..."
	
	@for rust_file in $(ANCHOR_OUTPUT_DIR)/*.rs; do \
		if [ -f "$$rust_file" ]; then \
			program_name=$$(basename "$$rust_file" .rs); \
			echo "Building Anchor project: $$program_name"; \
			mkdir -p $(ANCHOR_DIR)/$$program_name; \
			create_anchor_project "$$program_name" "$$rust_file"; \
		fi; \
	done
	
	@echo "✅ Anchor projects built"

# Create a complete Anchor project structure
define create_anchor_project
	@mkdir -p $(ANCHOR_DIR)/$(1)/programs/$(1)/src
	@mkdir -p $(ANCHOR_DIR)/$(1)/tests
	@mkdir -p $(ANCHOR_DIR)/$(1)/migrations
	
	@# Copy the generated Rust code
	@cp $(2) $(ANCHOR_DIR)/$(1)/programs/$(1)/src/lib.rs
	
	@# Create Anchor.toml
	@echo '[features]' > $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo 'seeds = false' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo 'skip-lint = false' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo '[programs.localnet]' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo '$(1) = "Generated by So Lang"' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo '[registry]' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo 'url = "https://api.apr.dev"' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo '[provider]' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo 'cluster = "localnet"' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	@echo 'wallet = "~/.config/solana/id.json"' >> $(ANCHOR_DIR)/$(1)/Anchor.toml
	
	@# Create Cargo.toml
	@echo '[package]' > $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'name = "$(1)"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'version = "0.1.0"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'description = "Generated by So Lang"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'edition = "2021"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo '' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo '[lib]' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'crate-type = ["cdylib", "lib"]' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'name = "$(1)"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo '' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo '[dependencies]' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'anchor-lang = "0.28.0"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	@echo 'anchor-spl = "0.28.0"' >> $(ANCHOR_DIR)/$(1)/programs/$(1)/Cargo.toml
	
	@echo "📦 Created Anchor project: $(1)"
endef

# ============================================================================
# NATIVE SOLANA COMPILATION
# ============================================================================

# Compile So Lang to native Solana Rust
compile-native: $(SOLANA_COMPILER) | $(NATIVE_OUTPUT_DIR)
	@echo "🦀 Compiling So Lang programs to native Solana Rust..."
	
	@# Counter program
	@if [ -f "$(COUNTER_PROGRAM)" ]; then \
		echo "Compiling counter program to native Solana..."; \
		$(SOLANA_COMPILER) $(COUNTER_PROGRAM) --native --output $(NATIVE_OUTPUT_DIR)/counter.rs; \
	fi
	
	@# Token transfer program
	@if [ -f "$(TOKEN_TRANSFER_PROGRAM)" ]; then \
		echo "Compiling token transfer program to native Solana..."; \
		$(SOLANA_COMPILER) $(TOKEN_TRANSFER_PROGRAM) --native --output $(NATIVE_OUTPUT_DIR)/token_transfer.rs; \
	fi
	
	@# Voting DAO program
	@if [ -f "$(VOTING_DAO_PROGRAM)" ]; then \
		echo "Compiling voting DAO program to native Solana..."; \
		$(SOLANA_COMPILER) $(VOTING_DAO_PROGRAM) --native --output $(NATIVE_OUTPUT_DIR)/voting_dao.rs; \
	fi
	
	@echo "✅ Native Solana compilation complete"

# Build native Solana programs
build-native: compile-native
	@echo "🔨 Building native Solana programs..."
	
	@for rust_file in $(NATIVE_OUTPUT_DIR)/*.rs; do \
		if [ -f "$$rust_file" ]; then \
			program_name=$$(basename "$$rust_file" .rs); \
			echo "Building native Solana program: $$program_name"; \
			mkdir -p $(NATIVE_SOLANA_DIR)/$$program_name/src; \
			create_native_project "$$program_name" "$$rust_file"; \
		fi; \
	done
	
	@echo "✅ Native Solana programs built"

# Create a native Solana project structure
define create_native_project
	@# Copy the generated Rust code
	@cp $(2) $(NATIVE_SOLANA_DIR)/$(1)/src/lib.rs
	
	@# Create Cargo.toml for native Solana
	@echo '[package]' > $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'name = "$(1)"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'version = "0.1.0"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'description = "Generated by So Lang - Native Solana"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'edition = "2021"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo '' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo '[lib]' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'crate-type = ["cdylib"]' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'name = "$(1)"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo '' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo '[dependencies]' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'solana-program = "1.16"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'spl-token = "4.0"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	@echo 'spl-associated-token-account = "2.0"' >> $(NATIVE_SOLANA_DIR)/$(1)/Cargo.toml
	
	@echo "📦 Created native Solana project: $(1)"
endef

# ============================================================================
# DEPLOYMENT AND TESTING
# ============================================================================

# Deploy Anchor programs to localnet
deploy-anchor: build-anchor
	@echo "🚀 Deploying Anchor programs to localnet..."
	
	@for project in $(ANCHOR_DIR)/*; do \
		if [ -d "$$project" ]; then \
			program_name=$$(basename "$$project"); \
			echo "Deploying $$program_name..."; \
			cd "$$project" && anchor build && anchor deploy --provider.cluster localnet; \
			cd -; \
		fi; \
	done
	
	@echo "✅ Anchor programs deployed"

# Deploy native Solana programs
deploy-native: build-native
	@echo "🚀 Building and deploying native Solana programs..."
	
	@for project in $(NATIVE_SOLANA_DIR)/*; do \
		if [ -d "$$project" ]; then \
			program_name=$$(basename "$$project"); \
			echo "Building and deploying $$program_name..."; \
			cd "$$project"; \
			cargo build-bpf --manifest-path=Cargo.toml; \
			solana program deploy target/deploy/$$program_name.so; \
			cd -; \
		fi; \
	done
	
	@echo "✅ Native programs deployed"

# Test programs
test-solana: build-anchor build-native
	@echo "🧪 Testing Solana programs..."
	
	@# Test Anchor programs
	@for project in $(ANCHOR_DIR)/*; do \
		if [ -d "$$project" ]; then \
			echo "Testing Anchor project: $$(basename $$project)"; \
			cd "$$project" && anchor test; \
			cd -; \
		fi; \
	done
	
	@echo "✅ Solana tests complete"

# ============================================================================
# DEVELOPMENT UTILITIES
# ============================================================================

# Start local Solana validator
start-validator:
	@echo "🌐 Starting local Solana validator..."
	@solana-test-validator --reset --quiet &
	@echo "✅ Local validator started"
	@echo "   RPC: http://localhost:8899"
	@echo "   WebSocket: ws://localhost:8900"

# Stop local validator
stop-validator:
	@echo "🛑 Stopping local Solana validator..."
	@pkill solana-test-validator || true
	@echo "✅ Local validator stopped"

# Check Solana environment
check-solana:
	@echo "🔍 Checking Solana development environment..."
	@echo "Solana CLI version:"
	@solana --version || echo "❌ Solana CLI not found"
	@echo "Rust version:"
	@rustc --version || echo "❌ Rust not found"
	@echo "Anchor version:"
	@anchor --version || echo "⚠️  Anchor not found (optional)"
	@echo "Current cluster:"
	@solana config get || echo "⚠️  Solana config not set"

# Setup Solana development environment
setup-solana:
	@echo "⚙️  Setting up Solana development environment..."
	
	@# Check if Solana is installed
	@if ! command -v solana >/dev/null 2>&1; then \
		echo "Installing Solana CLI..."; \
		sh -c "$$(curl -sSfL https://release.solana.com/v1.16.0/install)"; \
		export PATH="$$HOME/.local/share/solana/install/active_release/bin:$$PATH"; \
	fi
	
	@# Setup local config
	@solana config set --url localhost
	@solana config set --keypair ~/.config/solana/id.json
	
	@# Create keypair if it doesn't exist
	@if [ ! -f ~/.config/solana/id.json ]; then \
		solana-keygen new --no-passphrase; \
	fi
	
	@echo "✅ Solana environment setup complete"

# Generate program keypairs
generate-keypairs:
	@echo "🔑 Generating program keypairs..."
	@mkdir -p keypairs
	
	@solana-keygen new --no-passphrase --outfile keypairs/counter-keypair.json
	@solana-keygen new --no-passphrase --outfile keypairs/token-transfer-keypair.json
	@solana-keygen new --no-passphrase --outfile keypairs/voting-dao-keypair.json
	
	@echo "✅ Program keypairs generated in keypairs/"

# ============================================================================
# BENCHMARKING AND ANALYSIS
# ============================================================================

# Benchmark compilation times
benchmark-solana: $(SOLANA_COMPILER) solana-examples
	@echo "⚡ Benchmarking So Lang Solana compilation..."
	
	@echo "Anchor compilation times:"
	@time $(MAKE) -f Makefile.solana compile-anchor
	
	@echo "Native Solana compilation times:"
	@time $(MAKE) -f Makefile.solana compile-native
	
	@echo "✅ Benchmark complete"

# Analyze generated Rust code
analyze-rust: compile-anchor compile-native
	@echo "📊 Analyzing generated Rust code..."
	
	@echo "Anchor programs:"
	@for file in $(ANCHOR_OUTPUT_DIR)/*.rs; do \
		if [ -f "$$file" ]; then \
			echo "  $$(basename $$file): $$(wc -l < $$file) lines"; \
		fi; \
	done
	
	@echo "Native programs:"
	@for file in $(NATIVE_OUTPUT_DIR)/*.rs; do \
		if [ -f "$$file" ]; then \
			echo "  $$(basename $$file): $$(wc -l < $$file) lines"; \
		fi; \
	done

# ============================================================================
# CLEANUP
# ============================================================================

# Clean generated files
clean-solana:
	rm -rf $(SOLANA_BUILD_DIR) $(ANCHOR_DIR) $(NATIVE_SOLANA_DIR)
	rm -f $(BINDIR)/solang-solana*
	@echo "✅ Cleaned Solana build artifacts"

# Clean everything including examples
distclean-solana: clean-solana
	rm -rf $(SOLANA_EXAMPLES_DIR) keypairs
	@echo "✅ Cleaned everything"

# ============================================================================
# HELP AND STATUS
# ============================================================================

# Show build status
status-solana:
	@echo "So Lang Solana Development Status"
	@echo "================================="
	@if [ -f "$(SOLANA_COMPILER)" ]; then echo "✅ Solana compiler ready"; else echo "❌ Solana compiler not built"; fi
	@if [ -d "$(SOLANA_EXAMPLES_DIR)" ]; then echo "✅ Example programs ready"; else echo "❌ Example programs missing"; fi
	@if [ -d "$(ANCHOR_OUTPUT_DIR)" ]; then echo "✅ Anchor output ready"; else echo "❌ Anchor compilation needed"; fi
	@if [ -d "$(NATIVE_OUTPUT_DIR)" ]; then echo "✅ Native output ready"; else echo "❌ Native compilation needed"; fi
	@echo ""
	@echo "Development Environment:"
	@command -v solana >/dev/null 2>&1 && echo "✅ Solana CLI installed" || echo "❌ Solana CLI missing"
	@command -v anchor >/dev/null 2>&1 && echo "✅ Anchor installed" || echo "⚠️  Anchor not installed"
	@command -v rustc >/dev/null 2>&1 && echo "✅ Rust installed" || echo "❌ Rust missing"

# Help
help-solana:
	@echo "So Lang Solana Development Build System"
	@echo "======================================"
	@echo ""
	@echo "Setup:"
	@echo "  setup-solana        - Install and configure Solana environment"
	@echo "  check-solana        - Check development environment"
	@echo "  generate-keypairs   - Generate program keypairs"
	@echo ""
	@echo "Compilation:"
	@echo "  solana-compiler     - Build So Lang Solana compiler"
	@echo "  compile-anchor      - Compile to Anchor Rust"
	@echo "  compile-native      - Compile to native Solana Rust"
	@echo "  build-anchor        - Build complete Anchor projects"
	@echo "  build-native        - Build complete native projects"
	@echo ""
	@echo "Deployment:"
	@echo "  start-validator     - Start local Solana validator"
	@echo "  deploy-anchor       - Deploy Anchor programs"
	@echo "  deploy-native       - Deploy native programs"
	@echo "  test-solana         - Run program tests"
	@echo "  stop-validator      - Stop local validator"
	@echo ""
	@echo "Development:"
	@echo "  benchmark-solana    - Performance analysis"
	@echo "  analyze-rust        - Analyze generated code"
	@echo "  status-solana       - Show build status"
	@echo ""
	@echo "Cleanup:"
	@echo "  clean-solana        - Remove build artifacts"
	@echo "  distclean-solana    - Remove everything"

.PHONY: all solana-compiler solana-debug solana-examples
.PHONY: compile-anchor build-anchor compile-native build-native
.PHONY: deploy-anchor deploy-native test-solana
.PHONY: start-validator stop-validator check-solana setup-solana generate-keypairs
.PHONY: benchmark-solana analyze-rust clean-solana distclean-solana status-solana help-solana